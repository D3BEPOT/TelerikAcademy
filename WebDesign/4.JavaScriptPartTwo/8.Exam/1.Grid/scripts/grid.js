// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var GridView, GridViewRow, _compareTo, _ref;

  if ((_ref = this.controls) == null) {
    this.controls = {};
  }

  _compareTo = function(a, b) {
    if (!isNaN(a - b)) {
      return a - b;
    } else {
      return a.toString().localeCompare(b.toString());
    }
  };

  GridViewRow = (function() {
    var _renderData, _renderNested;

    function GridViewRow() {
      this.data = [];
      this.nestedGrid = null;
    }

    GridViewRow.prototype.addColumn = function(args) {
      var col, _i, _len;
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        col = args[_i];
        this.data.push(col);
      }
      return this;
    };

    GridViewRow.prototype.getNestedGrid = function() {
      return this.nestedGrid = new GridView();
    };

    _renderData = function(parent) {
      var col, tr, _i, _len, _ref1;
      tr = J('<tr />');
      _ref1 = this.data;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        col = _ref1[_i];
        tr.append(J('<td />').text(col));
      }
      if (this.nestedGrid != null) {
        tr.addClass('nestedRow');
        tr.click(function(e) {
          e.stopPropagation();
          return J(this.nextElementSibling).toggle();
        });
      }
      return parent.append(tr);
    };

    _renderNested = function(parent) {
      var td, tr;
      if (this.nestedGrid == null) {
        return;
      }
      td = J('<td />').attr('colspan', this.data.length);
      tr = J('<tr />').hide().append(td);
      this.nestedGrid.render(td);
      return parent.append(tr);
    };

    GridViewRow.prototype.render = function(parent) {
      _renderData.call(this, parent);
      return _renderNested.call(this, parent);
    };

    return GridViewRow;

  })();

  this.controls.GridView = GridView = (function() {
    var _renderData, _renderHeader;

    function GridView(selector) {
      if (!(this instanceof GridView)) {
        return new GridView(selector);
      }
      this.element = J(selector);
      this.header = [];
      this.data = [];
      this.sortAscending = 1;
    }

    GridView.prototype.addHeader = function() {
      var col, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        col = arguments[_i];
        _results.push(this.header.push(col));
      }
      return _results;
    };

    GridView.prototype.addRow = function() {
      var row;
      row = new GridViewRow().addColumn(arguments);
      this.data.push(row);
      return row;
    };

    _renderHeader = function(parent) {
      var a, col, i, tr, _fn, _i, _len, _ref1,
        _this = this;
      if (!this.header.length) {
        return;
      }
      tr = J('<tr />');
      _ref1 = this.header;
      _fn = function(i) {
        var self;
        self = _this;
        return a.click(function(e) {
          e.stopPropagation();
          e.preventDefault();
          self.sortAscending *= -1;
          self.data.sort(function(row1, row2) {
            return self.sortAscending * _compareTo(row1.data[i], row2.data[i]);
          });
          parent = J(this).parent().parent().parent().parent();
          parent.children().remove();
          return self.render(parent);
        });
      };
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        col = _ref1[i];
        a = J('<a />').attr('href', '#').text(col);
        _fn(i);
        tr.append(J('<th />').append(a));
      }
      return parent.append(tr);
    };

    _renderData = function(parent) {
      var row, _i, _len, _ref1, _results;
      _ref1 = this.data;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        row = _ref1[_i];
        _results.push(row.render(parent));
      }
      return _results;
    };

    GridView.prototype.render = function(parent) {
      var table;
      if (parent == null) {
        parent = this.element;
        this.element.children().remove();
      }
      table = J('<table />').addClass('table').addClass('table-bordered');
      _renderHeader.call(this, table);
      _renderData.call(this, table);
      return parent.append(table);
    };

    return GridView;

  })();

  this.controls.buildSchoolsGridView = function(selector, schools) {
    var course, courseGrid, courseRow, school, schoolsGrid, student, studentGrid, studentRow, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2;
    schoolsGrid = controls.GridView(selector);
    schoolsGrid.addHeader('Name', 'Location', 'Total Students', 'Specialty');
    for (_i = 0, _len = schools.length; _i < _len; _i++) {
      school = schools[_i];
      courseRow = schoolsGrid.addRow(school.name, school.location, school.numberOfCourses, school.specialty);
      courseGrid = courseRow.getNestedGrid();
      courseGrid.addHeader('Title', 'Start date', 'Number of Students');
      _ref1 = school.courses;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        course = _ref1[_j];
        studentRow = courseGrid.addRow(course.title, course.startDate, course.numberOfStudents);
        studentGrid = studentRow.getNestedGrid();
        studentGrid.addHeader('First Name', 'Last Name', 'Grade', 'Mark');
        _ref2 = course.students;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          student = _ref2[_k];
          studentGrid.addRow(student.firstName, student.lastName, student.grade, student.getMark(course));
        }
      }
    }
    return schoolsGrid;
  };

  this.controls.getSchoolsGridViewData = function(grid) {
    var schoolsData;
    return schoolsData = grid.data.map(function(schoolRow) {
      var schoolData;
      schoolData = {};
      schoolData.name = schoolRow.data[0];
      schoolData.location = schoolRow.data[1];
      schoolData.specialty = schoolRow.data[3];
      schoolData.courses = schoolRow.nestedGrid.data.map(function(courseRow) {
        var courseData;
        courseData = {};
        courseData.title = courseRow.data[0];
        courseData.startDate = courseRow.data[1];
        courseData.student = courseRow.nestedGrid.data.map(function(studentRow) {
          var studentData;
          studentData = {};
          studentData.firstName = studentRow.data[0];
          studentData.lastName = studentRow.data[1];
          studentData.grade = studentRow.data[2];
          studentData.marks = {};
          studentData.marks[courseData.title] = studentRow.data[3];
          return studentData;
        });
        return courseData;
      });
      return schoolData;
    });
  };

}).call(this);
